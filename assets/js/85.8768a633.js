(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{994:function(_,v,l){"use strict";l.r(v);var i=l(41),e=Object(i.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h2",{attrs:{id:"_1-cookie-和-sessionstorage、localstorage-区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1-cookie-和-sessionstorage、localstorage-区别"}},[_._v("#")]),_._v(" 1.cookie 和 sessionStorage、localStorage 区别")]),_._v(" "),l("ul",[l("li",[_._v("共同点")])]),_._v(" "),l("ol",[l("li",[_._v("保存在浏览器中，并且同源")]),_._v(" "),l("li",[_._v("减少网络请求，避免不必要的 http 请求")]),_._v(" "),l("li",[_._v("快速显示数据，从本地获取数据")]),_._v(" "),l("li",[_._v("存储类型都是字符串类型")])]),_._v(" "),l("ul",[l("li",[_._v("区别")]),_._v(" "),l("li",[_._v("http 请求\n"),l("ol",[l("li",[_._v("cookie 使用携带在 http 中")]),_._v(" "),l("li",[_._v("sessionStorage、localStorage 不会自动把数据传给服务器")])])]),_._v(" "),l("li",[_._v("大小\n"),l("ol",[l("li",[_._v("cookie 大小只有 4k 左右")]),_._v(" "),l("li",[_._v("sessionStorage、localStorage 大小有 5 兆")])])]),_._v(" "),l("li",[_._v("有效期\n"),l("ol",[l("li",[_._v("cookie 在设置的有效期内有效，即使浏览器窗口关闭")]),_._v(" "),l("li",[_._v("sessionStorage 属于会话存储，当浏览器窗口关闭销毁")]),_._v(" "),l("li",[_._v("localStorage 属于永久存储，窗口或者浏览器关闭依然有效")])])]),_._v(" "),l("li",[_._v("作用域\n"),l("ol",[l("li",[_._v("cookie 在所有同源窗口中都是共享的")]),_._v(" "),l("li",[_._v("sessionStorage 同源的同窗口")]),_._v(" "),l("li",[_._v("localStorage 在所有同源窗口中共享")])])])]),_._v(" "),l("h2",{attrs:{id:"_2-cookie-session-区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2-cookie-session-区别"}},[_._v("#")]),_._v(" 2.cookie,session 区别")]),_._v(" "),l("ul",[l("li",[_._v("session\n基于 cookie 实现，session 存储在服务端，sessionId 存储在 cookie 中")]),_._v(" "),l("li",[_._v("区别")])]),_._v(" "),l("ol",[l("li",[_._v("session 存储在服务端，cookie 是存储在客户端")]),_._v(" "),l("li",[_._v("cookie 存储类型是字符串，session 没有可以是任意类型")])]),_._v(" "),l("h2",{attrs:{id:"_3-token"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3-token"}},[_._v("#")]),_._v(" 3.Token")]),_._v(" "),l("ul",[l("li",[_._v("访问资源的凭证")]),_._v(" "),l("li",[_._v("组成：uid(用户的唯一标志)，time(时间戳)，sign(签名)")]),_._v(" "),l("li",[_._v("特点：")])]),_._v(" "),l("ol",[l("li",[_._v("服务端无状态，可拓展性好")]),_._v(" "),l("li",[_._v("每一次请求都要携带 token，将 token 放在 HTTP 的 header 中")]),_._v(" "),l("li",[_._v("基于 token 的用户认证是一种无状态的的认证方式，服务端不用存放 token，减少服务器压力")]),_._v(" "),l("li",[_._v("token 完全由应用管理，可以避开同源策略\n"),l("a",{attrs:{href:"https://mp.weixin.qq.com/s/Dt1X85geJ01J_ZiaiZibQw",target:"_blank"}},[_._v("Cookie、Session、Token、JWT")])])]),_._v(" "),l("h2",{attrs:{id:"_4-js-事件循环机制-eventloop"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4-js-事件循环机制-eventloop"}},[_._v("#")]),_._v(" 4.js 事件循环机制 EventLoop")]),_._v(" "),l("ul",[l("li",[_._v("事件循环机制")])]),_._v(" "),l("ol",[l("li",[_._v("异步事件放入到事件队列中，当主线程处于闲置状态(当前执行栈所有任务执行完毕),主线程会查找事件队列中是否有任务,如果有将事件队列中的第一位取出，并把这个事件的回调取出执行，如此反复....形成的循环")])]),_._v(" "),l("ul",[l("li",[_._v("不同的异步任务分为两类,宏观任务和微观任务")])]),_._v(" "),l("ol",[l("li",[_._v("宏观任务:\nsetInterval ,setTimeout,回调函数,xhr")]),_._v(" "),l("li",[_._v("微观任务:Promise\n异步事件会被放到事件队列中，会根据事件类型，分配到微观任务队列和宏观任务队列中\n当主线程处于闲置，会首先查看微观任务是否存在事件，如果有会一次执行微观任务的回调，直到微观队列清空，再去执行宏观队列的任务\n微任务永远在宏任务之前执行。")])]),_._v(" "),l("h2",{attrs:{id:"_5-重绘和回流"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-重绘和回流"}},[_._v("#")]),_._v(" 5.重绘和回流")]),_._v(" "),l("ul",[l("li",[_._v("重绘")])]),_._v(" "),l("ol",[l("li",[_._v("由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘")]),_._v(" "),l("li",[_._v("outline, visibility, color、background-color")])]),_._v(" "),l("ul",[l("li",[_._v("回流")])]),_._v(" "),l("ol",[l("li",[_._v("回流是布局或者几何属性需要改变就称为回流")]),_._v(" "),l("li",[_._v("回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。")]),_._v(" "),l("li",[_._v("一个元素的回流可能会导致了其所有子元素以及 DOM 中紧随其后的节点、祖先节点元素的随后的回流。")]),_._v(" "),l("li",[_._v("添加或删除可见的 DOM 元素,元素的位置发生变化,元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）,浏览器的窗口尺寸变化\n"),l("ul",[l("li",[_._v("注意:\n回流必定会发生重绘，重绘不一定会引发回流。")])])])]),_._v(" "),l("ul",[l("li",[_._v("优化\n"),l("ul",[l("li",[_._v("利用 class 替换样式")]),_._v(" "),l("li",[_._v("尽可能在 DOM 树的最末端改变 class")]),_._v(" "),l("li",[_._v("避免设置多项内联样式")]),_._v(" "),l("li",[_._v("使用 trsansform")]),_._v(" "),l("li",[_._v("避免使用 table 布局")]),_._v(" "),l("li",[_._v("操作 display:none 元素，最终显示出来")]),_._v(" "),l("li",[_._v("避免重复读取 offsetLeft 等属性，使用前把他们存起来")]),_._v(" "),l("li",[_._v("绝对定位具有复杂动画的元素")])])])]),_._v(" "),l("h2",{attrs:{id:"_6-进程与线程"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_6-进程与线程"}},[_._v("#")]),_._v(" 6. 进程与线程")]),_._v(" "),l("ul",[l("li",[_._v("进程\n"),l("ul",[l("li",[_._v("概念\n"),l("ul",[l("li",[_._v("是正在运行的程序的实例，")]),_._v(" "),l("li",[_._v("具有一定独立功能的程序关于某个数据集合的一次运行活动")]),_._v(" "),l("li",[_._v("操作系统的基本单元，是一个实体，是一个执行中的程序")]),_._v(" "),l("li",[_._v("是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。")])])]),_._v(" "),l("li",[_._v("特点\n"),l("ul",[l("li",[_._v("并发性")]),_._v(" "),l("li",[_._v("独立性")]),_._v(" "),l("li",[_._v("异步性")]),_._v(" "),l("li",[_._v("结构性")])])])])]),_._v(" "),l("li",[_._v("线程\n"),l("ul",[l("li",[_._v("概念\n"),l("ul",[l("li",[_._v("是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位")]),_._v(" "),l("li",[_._v("线程是进程中的主体，一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。")])])])])]),_._v(" "),l("li",[_._v("总结：进程是 CPU 资源分配的最小单位；线程是 CPU 调度的最小单位")])]),_._v(" "),l("h2",{attrs:{id:"_7-缓存"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7-缓存"}},[_._v("#")]),_._v(" 7. 缓存")]),_._v(" "),l("p",[l("a",{attrs:{href:"https://juejin.cn/post/6844903593275817998#heading-4",target:"_blank"}},[_._v("浏览器缓存")])]),_._v(" "),l("h2",{attrs:{id:"_8-垃圾回收机制"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_8-垃圾回收机制"}},[_._v("#")]),_._v(" 8. 垃圾回收机制")]),_._v(" "),l("ul",[l("li",[_._v("标记清除:在js中，最常用的垃圾回收机制是标记清除：当变量进入执行环境时，被标记为“进入环境”，当变量离开执行环境时，会被标记为“离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。")]),_._v(" "),l("li",[_._v("引用计数：一个对象，如果没有其他对象引用到它，这个对象就是零引用，将被垃圾回收机制回收\n"),l("ul",[l("li",[_._v("它的策略是跟踪记录每个变量值被使用的次数")]),_._v(" "),l("li",[_._v("一个对象被其他对象引用时，这个对象的引用次数就为 1，如果同一个值又被赋给另一个变量，那么引用数加 1，如果该变量的值被其他的值覆盖了，则引用次数减 1")]),_._v(" "),l("li",[_._v("当这个值的引用次数变为 0 的时候，说明没有变量在使用，这个值没法被访问了，回收空间，垃圾回收器会在运行的时候清理掉引用次数为 0 的值占用的内存")])])])]),_._v(" "),l("h2",{attrs:{id:"_9-一个页面从输入-url-到页面加载显示完成-这个过程中都发生了什么"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_9-一个页面从输入-url-到页面加载显示完成-这个过程中都发生了什么"}},[_._v("#")]),_._v(" 9.一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("首先在浏览器中输入 URL")])]),_._v(" "),l("li",[l("p",[_._v("查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。")]),_._v(" "),l("ul",[l("li",[_._v("浏览器缓存：浏览器会记录 DNS 一段时间，因此，只是第一个地方解析 DNS 请求；")]),_._v(" "),l("li",[_._v("操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的 DNS 查询缓存)；")]),_._v(" "),l("li",[_._v("路由器缓存：如果上述两个步骤均不能成功获取 DNS 记录，继续搜索路由器缓存；")]),_._v(" "),l("li",[_._v("ISP 缓存：若上述均失败，继续向 ISP 搜索。")])])]),_._v(" "),l("li",[l("p",[_._v("DNS 域名解析：浏览器向 DNS 服务器发起请求，解析该 URL 中的域名对应的 IP 地址。DNS 服务器是基于 UDP 的，因此会用到 UDP 协议。")])]),_._v(" "),l("li",[l("p",[_._v("建立 TCP 连接：解析出 IP 地址后，根据 IP 地址和默认 80 端口，和服务器建立 TCP 连接")])]),_._v(" "),l("li",[l("p",[_._v("发起 HTTP 请求：浏览器发起读取文件的 HTTP 请求，，该请求报文作为 TCP 三次握手的第三次数据发送给服务器")])]),_._v(" "),l("li",[l("p",[_._v("服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的 html 文件发送给浏览器")])]),_._v(" "),l("li",[l("p",[_._v("关闭 TCP 连接：通过四次挥手释放 TCP 连接")])]),_._v(" "),l("li",[l("p",[_._v("浏览器渲染：客户端（浏览器）解析 HTML 内容并渲染出来，浏览器接收到数据包后的解析流程为：")]),_._v(" "),l("ul",[l("li",[_._v("构建 DOM 树：词法分析然后解析成 DOM 树（dom tree），是由 dom 元素及属性节点组成，树的根是 document 对象")]),_._v(" "),l("li",[_._v("构建 CSS 规则树：生成 CSS 规则树（CSS Rule Tree）")]),_._v(" "),l("li",[_._v("构建 render 树：Web 浏览器将 DOM 和 CSSOM 结合，并构建出渲染树（render tree）")]),_._v(" "),l("li",[_._v("布局（Layout）：计算出每个节点在屏幕中的位置")]),_._v(" "),l("li",[_._v("绘制（Painting）：即遍历 render 树，并使用 UI 后端层绘制每个节点。")])])])])])}),[],!1,null,null,null);v.default=e.exports}}]);